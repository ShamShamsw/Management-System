# Sales Analytics and Reporting Tool

## Overview

This Python script implements a Sales Analytics and Reporting Tool that helps businesses track sales data, monitor inventory, and generate insightful reports. It allows users to record sales, generate sales reports, visualize sales data with bar charts, and analyze inventory turnover. The system loads and saves data from two JSON files—sales.json for sales data and inventory.json for inventory details.

## Features

Record Sale: Record a new sale by specifying the product name, quantity, and price, and automatically update inventory levels.
Generate Sales Report: Generate a report that includes the total revenue and best-selling product.
Visualize Sales Data: Generate a bar chart showing the quantity sold for each product.
Inventory Turnover Report: Display the current stock levels for each product in the inventory.
Persistent Storage: Sales and inventory data are saved and loaded from JSON files, allowing for data persistence.

## Requirements

Python 3.x
json module (part of Python’s standard library)
matplotlib module (for generating visualizations)
Install the required library using pip:

pip install matplotlib

# Usage

Running the Script
To run the Sales Analytics and Reporting Tool, execute the script. The system will load sales and inventory data from sales.json and inventory.json (or start with empty data if the files do not exist).

python sales_analytics.py

## Menu Options

The program will present a menu with the following options:

Record Sale: Record a sale by entering the product name, quantity sold, and price per unit. The inventory is updated automatically.
Generate Sales Report: Generate a sales report, showing the total revenue and the best-selling product.
Visualize Sales Data: Generate a bar chart to visualize the sales data.
Inventory Turnover Report: Display the current inventory stock levels for each product.
Exit: Exit the program.

## Example Interaction

Sales Analytics and Reporting Tool
1. Record Sale
2. Generate Sales Report
3. Visualize Sales Data
4. Inventory Turnover Report
5. Exit
Choose an option: 1
Enter product name: Widget
Enter quantity sold: 10
Enter price per unit: 20.0
Sale recorded: 10 x Widget at $20.00 each.

Sales Analytics and Reporting Tool
1. Record Sale
2. Generate Sales Report
3. Visualize Sales Data
4. Inventory Turnover Report
5. Exit
Choose an option: 2

Sales Report:
Total Revenue: $200.00
Best-Selling Product: Widget (Sold 10 times)

Sales Analytics and Reporting Tool
1. Record Sale
2. Generate Sales Report
3. Visualize Sales Data
4. Inventory Turnover Report
5. Exit
Choose an option: 3

# Code Structure

## SalesAnalytics Class
__init__(self, sales_file="sales.json", inventory_file="inventory.json"): Initializes the SalesAnalytics system, loading sales and inventory data from the respective files.
load_data(self, filename): Loads data (sales or inventory) from the specified JSON file. Returns an empty list for sales or an empty dictionary for inventory if the file is missing or corrupted.
save_data(self, filename, data): Saves data (sales or inventory) to the specified JSON file.
record_sale(self, product, quantity, price): Records a new sale, updating the sales data and inventory.
generate_sales_report(self): Generates and prints a sales report, including the total revenue and best-selling product.
visualize_sales(self): Generates a bar chart of sales data using matplotlib, showing the quantity sold for each product.
inventory_turnover_report(self): Displays the current stock levels of each product in the inventory.

## Main Function

The main() function serves as the user interface for interacting with the system. It provides a menu for recording sales, generating reports, visualizing sales, and displaying the inventory turnover report.

# File Format
The data for sales and inventory is stored in two separate JSON files.

## sales.json
The sales data is stored as a list of records. Each sale contains a product name, quantity sold, and price per unit:

[
  {
    "product": "Widget",
    "quantity": 10,
    "price": 20.0
  },
  {
    "product": "Gadget",
    "quantity": 5,
    "price": 15.0
  }
]

## inventory.json
The inventory data is stored as a dictionary, where each product has a name, price, and quantity in stock:


{
  "Widget": {
    "price": 20.0,
    "quantity": 50
  },
  "Gadget": {
    "price": 15.0,
    "quantity": 30
  }
}

## Error Handling

FileNotFoundError: If the sales.json or inventory.json file is missing, the system will initialize empty sales or inventory data.
json.JSONDecodeError: If the JSON files are corrupted or improperly formatted, the system will initialize empty sales or inventory data.
ValueError: If invalid input is provided (e.g., non-numeric values for quantity or price), the program will prompt the user to enter valid values.

## Customization

You can change the filenames used for sales and inventory data by providing different file paths when initializing the SalesAnalytics class.
You can modify the report generation logic, add more analytics, or customize the visualization as needed.